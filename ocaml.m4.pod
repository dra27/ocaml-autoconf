=encoding utf8

=head1 NAME

ocaml.m4 - Autoconf macros for OCaml

=head1 SUMMARY

 AC_PROG_OCAML
 AC_PROG_FINDLIB
 AC_CHECK_OCAML_PKG([extlib])

=head1 DESCRIPTION

B<ocaml.m4> is a file containing standard, useful autoconf macros for
detecting OCaml, findlib, OCaml packages and so on in your
autoconf-generated configure scripts.

To begin using these macros, you will need to copy the C<ocaml.m4>
file to the autoconf macros directory in your project.  Normally this
is the C<m4/> directory in your project, but the directory can be
changed using the C<AC_CONFIG_MACRO_DIR(DIR)> directive.  If you have
just created the C<m4> directory, then you may also need to do:

 aclocal -I m4

You can then add any of the macros described below to your
C<configure.ac> (or C<configure.in>).  Almost every OCaml project
should use C<AC_PROG_OCAML> first and probably C<AC_PROG_FINDLIB>
right after it.

This manual page does not describe how to use autoconf.  For that you
should read the detailed autoconf info file (C<info autoconf>).

=head1 AC_PROG_OCAML

This macro detects whether the OCaml compiler(s) are available.  It
defines and substitutes the following variables:

 OCAMLC          set to the name of the bytecode compiler
                   (eg. "ocamlc" or "ocamlc.opt"), or "no" if
                   no OCaml installation was found
 OCAMLOPT        the name of the native-code compiler, eg. "ocamlopt",
                   "ocamlopt.opt" or "no"
 OCAMLBEST       "byte" or "opt" or "no"
 OCAMLDEP        the name of the dependency resolver, eg. "ocamldep"
 OCAMLMKTOP      the name of ocamlmktop
 OCAMLMKLIB      the name of ocamlmklib
 OCAMLDOC        the name of ocamldoc
 OCAMLLIB        the OCaml library path
 OCAMLVERSION    the compiler version

=head2 Detecting if OCaml is installed

Unlike old versions of these macros, C<AC_PROG_OCAML> does I<not> exit
if no OCaml installation is detected.  Therefore if you want to detect
if OCaml is installed you have to do something like this:

 AC_PROG_OCAML
 if test "$OCAMLC" = "no"; then
   AC_MSG_ERROR([You must install the OCaml compiler])
 fi

=head2 Cross-compiling

If the configure script is invoked for cross-compiling then
C<AC_PROG_OCAML> will detect the cross-compiler versions of the OCaml
compiler, eg. C<OCAMLC=i686-pc-mingw32-ocamlc> etc.  This
happens automatically, and for most purposes you don't need to worry
about it.

=head1 AC_PROG_FINDLIB

This macro checks for the presence of the ocamlfind program (part of
findlib).  It defines and substitutes C<OCAMLFIND> to the name of the
ocamlfind program, or C<no> if not found.

Note that this macro does not fail if ocamlfind is not found.  If you
want to force the user to install findlib, you should do:

 AC_PROG_FINDLIB
 if test "$OCAMLFIND" = "no"; then
   AC_MSG_ERROR([You must install OCaml findlib (the ocamlfind command)])
 fi

See also C<AC_CHECK_OCAML_PKG>.

=head1 AC_PROG_OCAMLLEX

This checks for the ocamllex program and sets C<OCAMLLEX> to the name
of the program (eg. C<ocamllex> or C<ocamllex.opt>), or C<no> if not
found.

=head1 AC_PROG_OCAMLYACC

This checks for the ocamlyacc program and sets C<OCAMLYACC> to the
name of the program, or C<no> if not found.

=head1 AC_PROG_CAMLP4

This checks for camlp4, and checks that the version matches the
compiler version found previously.  It sets C<CAMLP4> to the name of
the basic camlp4 program, or C<no> if not found.

=head1 AC_CHECK_OCAML_PKG

This is the main macro that can be used to detect the presence of
OCaml modules.  This macro uses ocamlfind to look up findlib packages
(and thus requires that findlib itself has been installed and that the
package has been properly packaged with a META file etc.)  If you want
to find an OCaml module which hasn't been installed with findlib then
you should try using C<AC_CHECK_OCAML_MODULE> instead.

 AC_CHECK_OCAML_PKG([name])

checks for an OCaml module with the given name.  If found, it defines
and substitutes the variable C<OCAML_PKG_name> where the C<name> part
is substituted from the package name by replacing all dashes with
underscores.

For example,

 AC_CHECK_OCAML_PKG([xml-light])

will set C<OCAML_PKG_xml_light> to either C<yes> or C<no>.

To have the configure script fail if a package is not installed, do:

 AC_CHECK_OCAML_PKG([foo])
 if test "$OCAML_PKG_foo" = "no"; then
   AC_MSG_ERROR([Please install OCaml library 'foo'.])
 fi

In your Makefile.in, use package names in conjunction with ocamlfind,
eg:

 .ml.cmo:
   $(OCAMLFIND) ocamlc -package foo -c $< -o $@

=head1 AC_CHECK_OCAML_MODULE(VARIABLE,NAME,MODULE,INCLUDE-PATHS)

C<AC_CHECK_OCAML_MODULE> is the hairier alternative to
C<AC_CHECK_OCAML_PKG>.  You should always use C<AC_CHECK_OCAML_PKG>
and ocamlfind/findlib if possible.

The parameters are:

=over

=item VARIABLE

This is the environment variable that is set.  It will either be set
to the include path, or to C<no> if the module was not found.

=item NAME

This is the name of the module we are looking for.  This parameter is
just used for printing messages, and does not affect how the module is
found.

=item MODULE

This should be an OCaml module name, representing the module name
being looked up.  You can put submodules here, eg.
C<CalendarLib.Date>

=item INCLUDE-PATHS

This is the default list of include directories to search, eg.
C<+calendar>

=back

For example, the following code will check for the OCaml Calendar
module, and will distinguish between version 1 and version 2 of
this module (which have incompatible APIs).

 AC_CHECK_OCAML_PKG(calendar)
 AC_CHECK_OCAML_MODULE(is_calendar2,calendar,[CalendarLib.Date],[+calendar])

After the above code has run, variables C<OCAML_PKG_calendar> and
C<is_calendar2> will be set as follows:

 OCAML_PKG_calendar  is_calendar2  Result
 
 yes                 +calendar     Calendar v2 is installed
 yes                 no            Calendar v1 is installed
 no                  no            No Calendar module installed

=head1 AC_CHECK_OCAML_WORD_SIZE

This checks the word size of the OCaml compiler, and sets
C<OCAML_WORD_SIZE> to either C<32> or C<64>.

=head1 SEE ALSO

L<autoconf(1)>,
L<http://forge.ocamlcore.org/projects/ocaml-autoconf/>,
L<http://caml.inria.fr/>

=head1 AUTHORS

Various people have contributed to these macros over many years:

=over

=item *

Olivier Andrieu

=item *

Jean-Christophe Filli√¢tre

=item *

Richard W.M. Jones

=item *

Georges Mariano

=item *

Stefano Zacchiroli

=back

=head1 LICENSE









=head1 REPORTING BUGS

Please report bugs to the authors at the following website:
L<http://forge.ocamlcore.org/projects/ocaml-autoconf/>
